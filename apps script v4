/************* CONFIG *************/
const DATA_SHEET    = 'Data';
const LOG_SHEET     = 'Log';
const SUMMARY_SHEET = 'Summary';
const EXPECTED      = 'Smart_Plug';
const TZ            = 'Asia/Bangkok';

/************* Web App Entrypoints *************/
function doPost(e){ return handleReq(e, 'POST'); }
function doGet(e){  return handleReq(e, 'GET');  }

/************* Main Handler *************/
function handleReq(e, method){
  const ss = SpreadsheetApp.getActive();
  const dataSh = ss.getSheetByName(DATA_SHEET)    || ss.insertSheet(DATA_SHEET);
  const logSh  = ss.getSheetByName(LOG_SHEET)     || ss.insertSheet(LOG_SHEET);
  const sumSh  = ss.getSheetByName(SUMMARY_SHEET) || ss.insertSheet(SUMMARY_SHEET);

  ensureDataHeader_(dataSh);
  ensureSummaryHeader_(sumSh);
  ensureLogHeader_(logSh);

  // ---- Parse payload ----
  const safe = e || {};
  const headers = safe.headers || {};
  const ct  = String(headers['content-type'] || headers['Content-Type'] || (safe.postData && safe.postData.type) || '').toLowerCase();
  const raw = (safe.postData && safe.postData.contents) || '';
  let d = {};
  try {
    try { d = JSON.parse(raw || '{}'); } catch (_) {}
    if (!Object.keys(d).length && Object.keys(safe.parameter || {}).length) d = safe.parameter;
    if (!Object.keys(d).length && raw) d = parsePlain(raw);
  } catch (err) {
    logSh.appendRow([new Date(), method, 'parse-error', String(err), raw]);
    return ContentService.createTextOutput('BAD_PAYLOAD');
  }

  // ---- Auth (secret) ----
  const secret = headers['x-secret'] || headers['X-Secret'] || (d.k || d.K) ||
                 (safe.parameter && (safe.parameter.k || safe.parameter.K)) || '';
  const ok = EXPECTED ? (secret === EXPECTED) : true;

  logSh.appendRow([new Date(), method, 'ct='+ct, 'secret='+(ok?'ok':'bad'), raw || JSON.stringify(d)]);
  if (!ok) return ContentService.createTextOutput('FORBIDDEN');

  // ---- PULL LATEST STATE ----
  const ctParam = String((d.ct || (safe.parameter && safe.parameter.ct) || '')).trim().toLowerCase();
  if (ctParam === 'pull_state' || ctParam === 'last') {
    const latest = latestFromData_(dataSh);
    return ContentService
      .createTextOutput(JSON.stringify(latest || { ok:false, reason:'NO_DATA' }))
      .setMimeType(ContentService.MimeType.JSON);
  }

  // ---- Write Data (live ทุกนาที) ----
  const dataRow = [
    new Date(),           // ts
    onoff(d.swA), onoff(d.swB),
    num(d.iIn), num(d.vIn),
    num(d.vA), num(d.vB),
    num(d.iA), num(d.iB),
    num(d.pA), num(d.pB),
    num(d.tC), num(d.hum),
    tripText(d.tripA), tripText(d.tripB),
    num(d.dWh), num(d.wWh),
    num(d.dWhPrev), num(d.wWhPrev)
  ];
  dataSh.appendRow(dataRow);
  SpreadsheetApp.flush();

  // ---- Summary: บันทึก “เฉพาะตอนตัดรอบ” วันละ 1 แถว ----
  appendSummary_ON_CUT_ONLY_(sumSh, d);

  // (optional) log ข้อความจากอุปกรณ์เวลา ct=summary
  if (String(d.ct || '') === 'summary') {
    logSh.appendRow([new Date(), 'SUMMARY', d.dailySummary || '', d.adviceSummary || '']);
  }

  return ContentService.createTextOutput('OK');
}

/************* Data header (ต้องสอดคล้องกับ latestFromData_) *************/
function ensureDataHeader_(sh){
  if (sh.getLastRow() === 0){
    sh.appendRow([
      'ts','swA','swB','iIn','vIn','vA','vB','iA','iB','pA','pB',
      'tC','hum','tripA','tripB',
      'dailyWh','weeklyWh','dailyWhPrev','weeklyWhPrev' // index 15..18 (0-based)
    ]);
  }
}

/************* Summary header (คอลัมน์ tips สำหรับข้อความ) *************/
function ensureSummaryHeader_(sh){
  const want = ['ts','dailyWh','dailyWhPrev','weeklyWh','weeklyWhPrev','tips'];
  if (sh.getLastRow() === 0){
    sh.appendRow(want);
    return;
  }
  const header = sh.getRange(1,1,1,sh.getMaxColumns()).getValues()[0].map(x=>String(x||'').trim());
  if (header.length < want.length){
    sh.getRange(1, header.length+1, 1, want.length-header.length)
      .setValues([want.slice(header.length)]);
  }
}

/************* Log header *************/
function ensureLogHeader_(sh){
  if (sh.getLastRow() === 0){
    sh.appendRow(['ts','method','tag','info']);
  }
}

/**
 * เขียน Summary “เฉพาะตอนตัดรอบ”
 * - cut (หลังตัด): dWh ≈ 0 && dWhPrev > 0
 * - วันละแถวเดียว: ถ้ามีแถวของวันนี้อยู่แล้ว → อัปเดตค่า/ข้อความแทน
 * - ค่าโชว์: ใช้ dWhPrev/wWhPrev เป็นค่า effective เพื่อไม่ให้เป็น 0
 */
function appendSummary_ON_CUT_ONLY_(sh, d){
  const nearZero = v => Math.abs(Number(v)||0) < 1e-6;

  const dWh     = Number(d.dWh)||0;
  const dWhPrev = Number(d.dWhPrev||0);
  const wWh     = Number(d.wWh)||0;
  const wWhPrev = Number(d.wWhPrev)||0;

  // cut = หลังรีเซ็ต: dWh=0 และ dWhPrev>0
  const isCut = ( nearZero(dWh) && !nearZero(dWhPrev) );
  if (!isCut) return;

  // ค่า effective สำหรับชีต
  const dailyEff  = dWhPrev;
  const weeklyEff = !nearZero(wWh) ? wWh : ( !nearZero(wWhPrev) ? wWhPrev : dWhPrev );

  // รวมข้อความเป็นคอลัมน์ tips
  const dailyMsg = String(d.dailySummary || '').trim();   // เช่น "ใช้ไฟวันนี้: 30.94 Wh"
  const advice   = String(d.adviceSummary || '').trim();  // เช่น "ปิดปลั๊กเมื่อไม่ได้ใช้งาน"
  const tipsText = advice ? (dailyMsg ? (dailyMsg + ' | แนะนำ: ' + advice) : ('แนะนำ: ' + advice)) : dailyMsg;

  const ymd = Utilities.formatDate(new Date(), TZ, 'yyyy-MM-dd');

  // ถ้ามีแถวของวันนี้อยู่แล้ว → อัปเดต
  const lastRow = sh.getLastRow();
  if (lastRow > 1){
    const rows = sh.getRange(2,1,lastRow-1,1).getValues();
    for (let i=0;i<rows.length;i++){
      const cell = rows[i][0];
      const cellYmd = (cell instanceof Date) ? Utilities.formatDate(cell, TZ, 'yyyy-MM-dd') : String(cell||'').trim();
      if (cellYmd === ymd){
        sh.getRange(i+2, 2, 1, 4).setValues([[dailyEff, dWhPrev, weeklyEff, wWhPrev]]);
        sh.getRange(i+2, 6).setValue(tipsText);
        return;
      }
    }
  }

  // ยังไม่มีแถวของวันนี้ → สร้างใหม่ (แถวเดียว)
  sh.appendRow([ymd, dailyEff, dWhPrev, weeklyEff, wWhPrev, tipsText]);
}

/************* Helpers *************/
function num(x){ return (x === '' || x === null || x === undefined) ? '' : Number(x); }
function isTrue(v){ return v===true || v===1 || v==='1' || String(v).toLowerCase()==='true' || v==='เปิด' || v==='ตัดแล้ว'; }
function onoff(v){ return isTrue(v) ? 'เปิด' : 'ปิด'; }
function tripText(v){ return isTrue(v) ? 'ตัดแล้ว' : 'ปกติ'; }

// ✅ fixed: parser แบบ urlencoded/kv และ แบบ 'a,b,c' 
function parsePlain(raw){
  const res = {};
  const parts = raw.split(/[,|]/).map(s => s.trim());
  if (parts.length >= 18){
    [res.swA,res.swB,res.iIn,res.vIn,res.vA,res.vB,res.iA,res.iB,res.pA,res.pB,res.tC,res.hum,res.tripA,res.tripB,
     res.dWh,res.wWh,res.dWhPrev,res.wWhPrev] = parts;
    return res;
  }
  raw.split(/[\n&]+/).forEach(seg=>{
    if (!seg) return;
    const i = seg.indexOf('=');
    if (i >= 0){
      const k = seg.slice(0,i).trim();
      const v = seg.slice(i+1).trim();
      if (k) res[k] = v;           // <-- แก้ตรงนี้
    } else {
      const k = seg.trim();
      if (k) res[k] = '';
    }
  });
  return res;
}

/************* (optional) Column/row helpers *************/
function getColMap_(sh, keys){
  const header = sh.getRange(1,1,1,sh.getMaxColumns()).getValues()[0];
  const map = {};
  for (let c=1;c<=header.length;c++){
    const name = String(header[c-1]||'').trim();
    if (!name) continue;
    keys.forEach(k=>{ if (name===k && !map[k]) map[k]=c; });
  }
  return map;
}
function cellToYmd_(v){
  if (v instanceof Date) return Utilities.formatDate(v, TZ, 'yyyy-MM-dd');
  const s = String(v||'').trim();
  if (/^\d{4}-\d{2}-\d{2}$/.test(s)) return s;
  const d = new Date(s); if (!isNaN(d.getTime())) return Utilities.formatDate(d, TZ, 'yyyy-MM-dd');
  return s;
}
function getSummaryRowIndex_(sh, ymd, map){
  const lastRow = sh.getLastRow();
  if (lastRow < 2) return 0;
  const candidateCols = [];
  if (map.ts) candidateCols.push(map.ts);
  if (!candidateCols.includes(1)) candidateCols.push(1);
  for (const col of candidateCols){
    const rng = sh.getRange(2, col, lastRow-1, 1);
    const vals = rng.getValues();
    for (let i=0;i<vals.length;i++){
      if (cellToYmd_(vals[i][0]) === ymd) return 2 + i;
    }
  }
  return 0;
}

/************* LATEST PULL (กันศูนย์หลังตัดรอบ) *************/
function latestFromData_(sh){
  const lastRow = sh.getLastRow();
  if (lastRow < 2) return null;

  const lastCol = sh.getLastColumn();
  const LOOKBACK = Math.min(200, lastRow - 1);
  const startRow = lastRow - LOOKBACK + 1;
  const rows = sh.getRange(startRow, 1, LOOKBACK, lastCol).getValues();

  for (let i = rows.length - 1; i >= 0; i--) {
    const row = rows[i];

    // 0 ts, 15 dailyWh, 16 weeklyWh, 17 dailyWhPrev, 18 weeklyWhPrev
    const ts           = row[0];
    const dailyWh      = Number(row[15] || 0);
    const weeklyWh     = Number(row[16] || 0);
    const dailyWhPrev  = Number(row[17] || 0);
    const weeklyWhPrev = Number(row[18] || 0);

    const effDaily  = dailyWh  > 0 ? dailyWh  : (dailyWhPrev  > 0 ? dailyWhPrev  : 0);
    const effWeekly = weeklyWh > 0 ? weeklyWh : (weeklyWhPrev > 0 ? weeklyWhPrev : 0);

    if (effDaily > 0 || effWeekly > 0 || dailyWhPrev > 0 || weeklyWhPrev > 0) {
      const ymd = (ts instanceof Date)
        ? Utilities.formatDate(ts, TZ, 'yyyyMMdd')
        : Utilities.formatDate(new Date(ts), TZ, 'yyyyMMdd');
      const tsISO = (ts instanceof Date)
        ? Utilities.formatDate(ts, TZ, "yyyy-MM-dd'T'HH:mm:ss")
        : String(ts);

      return {
        ok: true,
        row: startRow + i,
        tsISO: tsISO,
        ymd: Number(ymd),
        dWh: effDaily,
        wWh: effWeekly,
        dWhPrev: dailyWhPrev,
        wWhPrev: weeklyWhPrev
      };
    }
  }
  return { ok:false, reason:'NO_MEANINGFUL_DATA' };
}
